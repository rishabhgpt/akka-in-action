########################################
# akka-http-core Reference Config File #
########################################

# This is the reference config file that contains all the default settings.
# Make your edits/overrides in your application.conf.

# Akka HTTP version, checked against the runtime version of Akka HTTP.
# Loaded from generated conf file.
include "akka-http-version"

akka {
  loggers = ["akka.event.slf4j.Slf4jLogger"]
  # Options: OFF, ERROR, WARNING, INFO, DEBUG
  loglevel = "DEBUG"
  logging-filter = "akka.event.slf4j.Slf4jLoggingFilter"

  actor {
    #provider = "cluster"
    deployment {
      logrouter {
        router = balancing-pool
        resizer {
          lower-bound = 2
          upper-bound = 15
          messages-per-resize = 50
        }
        pool-dispatcher {
          executor = "thread-pool-executor"
          thread-pool-executor {
            core-pool-size-min = 10
            core-pool-size-max = 100
          }
        }
      }
    }
    debug {
      # enable DEBUG logging of unhandled messages
      unhandled = on
      autoreceive = on
    }
  }
  remote {
    log-remote-lifecycle-events = off
    netty.tcp {
      hostname = "127.0.0.1"
      port = 2551
    }
  }

  cluster {
    #seed-nodes = [
    #  "akka.tcp://app@127.0.0.1:2551"
    #]
    # Not recommended in production
    # auto-down-unreachable-after = 10s

    metrics {
      native-library-extract-folder = ${user.dir}/target/native
    }
  }
  http {
    server {
      server-header = akka-http/${akka.http.version}
      idle-timeout = 300 s # idle connections will be automatically closed. `infinite` to disable
      request-timeout = 240 s
      bind-timeout = 5s
      linger-timeout = 1 min
      max-connections = 2048 # max concurrent accepted connections when using `Http().bindAndHandle`
      remote-address-header = on
      raw-request-uri-header = off
      pipelining-limit = 16 # max requests that are accepted on single connection
      transparent-head-requests = on # automatic handling of HEAD requests
      verbose-error-messages = on # stripping of more detailed error message to the client
      response-header-size-hint = 512
      backlog = 1024 # maximum length of queue of incoming connections
      default-host-header = "paytm.com"
      # undefined means take the default of the system
      socket-options {
        so-receive-buffer-size = undefined
        so-send-buffer-size = undefined
        so-reuse-address = undefined
        so-traffic-class = undefined
        tcp-keep-alive = undefined
        tcp-oob-inline = undefined
        tcp-no-delay = undefined
      }
      parsing { }
      # non https data. Int: determines how many bytes should be logged per data chunk
      log-unencrypted-network-bytes = off
      http2 {
        request-entity-chunk-size = 65536 b # maximum number of bytes
        incoming-connection-level-buffer-size = 10 MB
        incoming-stream-level-buffer-size = 512kB
      }
    }
    client {
      user-agent-header = akka-http/${akka.http.version} #default user agent
      connecting-timeout = 30s # tcp connection process must be completed
      idle-timeout = 60 s # after which idle connections will be automatically closed
      request-header-size-hint = 512 # initial size of the buffer to render the request headers in.
      socket-options {
        so-receive-buffer-size = undefined
        so-send-buffer-size = undefined
        so-reuse-address = undefined
        so-traffic-class = undefined
        tcp-keep-alive = undefined
        tcp-oob-inline = undefined
        tcp-no-delay = undefined
      }
      parsing {}
      log-unencrypted-network-bytes = off
    }
    host-connection-pool {
      max-connections = 4 # single host endpoing max number of parallel connections in connection pool
      min-connections = 0
      max-retries = 5 # maximum number of times failed requests are atempted again
      max-open-requests = 32 # maximum number of open requests accepted into the pool
      pipelining-limit = 1 # http pipelining
      idle-timeout = 150 s
      client = {
        user-agent-header = akka-http/${akka.http.version} # default user agent
        connecting-timeout = 10s # tcp connection process must be completed
        idle-timeout = 60 s # after which idle connecions will be closed
        request-header-size-hint = 512
        socket-options {
          so-receive-buffer-size = undefined
          so-send-buffer-size = undefined
          so-reuse-address = undefined
          so-traffic-class = undefined
          tcp-keep-alive = undefined
          tcp-oob-inline = undefined
          tcp-no-delay = undefined
        }
        parsing {
        }
      }
    }

    # Modify to tweak default parsing settings.
    # IMPORTANT:
    # Please note that this sections settings can be overriden by the corresponding settings in:
    # `akka.http.server.parsing`, `akka.http.client.parsing` or `akka.http.host-connection-pool.client.parsing`.
    parsing {
      # The limits for the various parts of the HTTP message parser.
      max-uri-length             = 2k
      max-method-length          = 16
      max-response-reason-length = 64
      max-header-name-length     = 64
      max-header-value-length    = 8k
      max-header-count           = 64
      max-chunk-ext-length       = 256
      max-chunk-size             = 1m

      max-content-length = 8m # Default max content length for incoming request entities
      uri-parsing-mode = strict
      cookie-parsing-mode = rfc6265
      illegal-header-warnings = on
      error-logging-verbosity = full# full, off, simple
      tls-session-info-header = off
      # Supported mode:
      # `error`  : default mode, throw an ParsingException and terminate the processing
      # `warn`   : ignore the illegal characters in response header value and log a warning message
      # `ignore` : just ignore the illegal characters in response header value
      illegal-response-header-value-processing-mode = error # error, warn, ignore

      header-cache {
        default = 12
        Content-MD5 = 0
        Date = 0
        If-Match = 0
        If-Modified-Since = 0
        If-None-Match = 0
        If-Range = 0
        If-Unmodified-Since = 0
        User-Agent = 32
      }
    }
  }
  #extensions = ["akka.cluster.metrics.ClusterMetricsExtension"]
  dispatchers {
    fork-join-dispatcher {
      # Dispatcher is the name of the event-based dispatcher
      type = Dispatcher
      # What kind of ExecutionService to use
      executor = "fork-join-executor"
      # Configuration for the fork join pool
      fork-join-executor {
        # Min number of threads to cap factor-based parallelism number to
        parallelism-min = 20
        # Parallelism (threads) ... ceil(available processors * factor)
        parallelism-factor = 2.0
        # Max number of threads to cap factor-based parallelism number to
        parallelism-max = 100
      }
      # Throughput defines the maximum number of messages to be
      # processed per actor before the thread jumps to the next actor.
      # Set to 1 for as fair as possible.
      throughput = 100
    }
    thread-pool-dispatcher {
      type = Dispatcher
      executor = "thread-pool-executor"
      thread-pool-executor {
        fixed-pool-size = 100
      }
      throughput = 100
    }
    logger-dispatcher {
      type = Dispatcher
      executor = "thread-pool-executor"
      thread-pool-executor {
        fixed-pool-size = 100
      }
      throughput = 100
    }
  }
}



kamon {
  metrics {
    actor {
      loglevel = ERROR
      filters = [
        {
          actor {
            includes = ["*"]
            excludes = ["system/*", "user/IO-*"]
          }
        },
        {
          router {
            includes = ["*"]
            excludes = ["system/*", "user/IO-*"]
          }
        },
        {
          trace {
            includes = ["*"]
            excludes = []
          }
        },
        {
          dispatcher {
            includes = ["*"]
            excludes = []
          }
        }
      ]
    }
  }
  statsd {
    hostname = "10.0.1.4"
    port = 8125
    flush-interval = 1 second
    max-packet-size = 1024 bytes

    includes
      {
        actor = ["*"]
        trace = ["*"]
        dispatcher = ["*"]
      }
    simple-metric-key-generator {

      application = "test.akka"
    }
  }
  jmx {
    subscriptions {
      histogram       = [ "**" ]
      min-max-counter = [ "**" ]
      gauge           = [ "**" ]
      counter         = [ "**" ]
      trace           = [ "**" ]
      trace-segment   = [ "**" ]
      akka-actor      = [ "**" ]
      akka-dispatcher = [ "**" ]
      akka-router     = [ "**" ]
      system-metric   = [ "**" ]
      http-server     = [ "**" ]
      # Here is the addition of the JMX exporting functionality to the subscriptions
      kamon-mxbeans   = [ "**" ]
    }
  }
  modules {
    kamon-akka {
      requires-aspectj = yes
    }
    kamon-jmx {
      auto-start = yes
      requires-aspectj = yes
      extension-class = "kamon.jmx.JMXReporter"
    }
    kamon-mxbeans {
      auto-start = yes
      requires-aspectj = yes
      extension-class = "kamon.jmx.extension.JMXMetricImporter"
    }
  }
  # Configuring what JMX metrics to export to Kamon
  kamon-mxbeans {
    mbeans = [
      { "name": "my-mbean", "jmxQuery": "test:type=exampleBean,name=*",
        "attributes": [
          { "name": "Value1", "type": "counter" },
          { "name": "Value2", "type": "counter" } ] }
    ],
    identify-delay-interval-ms = 1000,
    identify-interval-ms = 1000,
    value-check-interval-ms = 1000
  }
  show-aspectj-missing-warning = yes
}